@model MeMiXReMiX.ViewModels.AddSongViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager



    <h1>MeMiX ReMiX</h1>

    <p> <h5>HOW IT WORKS:</h5></p>
    <ol>
        <li>Make an audio clip selection for each instrument</li>
        <li>Click 'Play your song' and you will hear your results</li>
        <li>Repeat steps 1 & 2 you much as you like</li>
        <li>Save it when you have created your masterpiece</li>
    </ol>
    <table>
        <tr>
            <td>
                <p>Bass</p>
            </td>
            <td>
                <select id="bass-select" class="selectors" onchange="javascript: getMp3(0, 'bass-select');">
                    <option value="0">--</option>
                    <option value="1">Bass1</option>
                    <option value="2">Bass2</option>
                    <option value="3">Bass3</option>
                    <option value="4">Bass4</option>
                </select>
            </td>
            <td>
                <button onclick="javascript: playInstrument(0, 'bass-select');" type="button">Play Bass</button>
            </td>
        </tr>
        <tr>
            <td><p>Synth</p></td>
            <td>
                <select id="synth-select" class="selectors" onchange="javascript: getMp3(1, 'synth-select');">
                    <option value="0">--</option>
                    <option value="1">Synth1</option>
                    <option value="2">Synth2</option>
                    <option value="3">Synth3</option>
                    <option value="4">Synth4</option>
                    <option value="5">Synth5</option>

                </select>
            </td>
            <td>
                <button onclick="javascript: playInstrument(1, 'synth-select');" type="button">Play Synth</button>
            </td>
        </tr>
        <tr>
            <td><p>Drums</p></td>
            <td>
                <select id="drums-select" class="selectors" onchange="javascript: getMp3(2, 'drums-select');">
                    <option value="0">--</option>
                    <option value="1">Drums1</option>
                    <option value="2">Drums2</option>
                    <option value="3">Drums3</option>
                    <option value="4">Drums4</option>
                    <option value="5">Drums5</option>
                    <option value="6">Drums6</option>

                </select>
            </td>
            <td>
                <button onclick="javascript: playInstrument(2, 'drums-select');" type="button">Play Drums</button>
            </td>
        <tr>
            <td><p>Glitch</p></td>
            <td>
                <select id="glitch-select" class="selectors" onchange="javascript: getMp3(3, 'glitch-select');">
                    <option value="0">--</option>
                    <option value="1">Glitch1</option>
                    <option value="2">Glitch2</option>
                    <option value="3">Glitch3</option>
                    <option value="4">Glitch4</option>
                    <option value="5">Glitch5</option>
                    <option value="6">Glitch6</option>
                </select>
            </td>
            <td>
                <button onclick="javascript: playInstrument(3, 'glitch-select');" type="button">Play Glitches</button>
            </td>
        </tr>
        <tr>
            <td>
                <button id="stop-song" onclick="stopAllTracks()" data-playing="true" aria-checked="true" type="button" >Make it Stop!!!</button>
            </td>
        </tr>
    </table>

    <p><h4>Like what you've made? Give it a title and save it for later!</h4></p>

    <form asp-controller="Home" asp-action="MakeSongs" method="post">
        <div class="form-group">
            <label asp-for="Title"></label>
            <input id="title" class="form-control" asp-for="Title" />
            <span asp-validation-for="Title"></span>
        </div>
        <div class="form-group">
            <input id="digits" class="form-control" type="hidden" asp-for="FilePointer" />
            <span asp-validation-for="FilePointer"></span>
        </div>
        <div class="form-group">
            <input id="appUserName" class="form-control" type="hidden" asp-for="ApplicationsUserUserName" value="@UserManager.GetUserName(User)" />
            <span asp-validation-for="ApplicationsUserUserName"></span>
        </div>
        <div class="form-group">
            <input id="appUserID" class="form-control" type="hidden" asp-for="ApplicationUserID"  value="@UserManager.GetUserId(User)" />
            <span asp-validation-for="ApplicationUserID"></span>
        </div>

        <input id="actual-submit" type="submit" hidden="hidden">
    </form>

    <button id="fake-submit" onclick="javascript: collectSelections();">Save it!!!</button>


    <script type="text/javascript">

        var audioCtx = new AudioContext();

        let buffers = {};
        let offset = 0;
        let playingSelection = null;
        let currentlyPlayingInstruments = {};

        var bassURLSegment = "/music/bass/bass";
        var synthURLSegment = "/music/synth/synth";
        var drumURLSegment = "/music/drums/drums";
        var glitchURLSegment = "/music/glitch/glitch";

        var instrumentUrlSegments = [bassURLSegment, synthURLSegment, drumURLSegment, glitchURLSegment];


        /*
            Grabs the appropriate buffer from the buffers dictionary, using the URL as the Key.
            Stores the audioSource in a dictionary with the URL segment (that contains the instrument type) as the key.
            When User adds a new mp3 to the song, the dictionary is referenced to stop the already playing mp3 of that instrument type.
         */
        function playInstrument(instrumentNumber, elementID) {
            var e = document.getElementById(elementID);
            pickedFileNumber = e.options[e.selectedIndex].value;
            var playUrl = instrumentUrlSegments[instrumentNumber] + pickedFileNumber + ".mp3";

            var playBuffer = buffers[playUrl];

            var audioSource = audioCtx.createBufferSource();
            audioSource.buffer = playBuffer;
            audioSource.connect(audioCtx.destination);
            audioSource.loop = true;

            if (offset == 0) {
                audioSource.start(0);
                var trackLength = playBuffer.duration;

                offset = audioCtx.currentTime % trackLength;

                playingSelection = audioSource;
                var playingFileURLSegment = instrumentUrlSegments[instrumentNumber];
                currentlyPlayingInstruments[playingFileURLSegment] = playingSelection;

            } else {

                var playingFileURLSegment = instrumentUrlSegments[instrumentNumber];

                if (currentlyPlayingInstruments[playingFileURLSegment]) {

                    var currentInstrumentAudio = currentlyPlayingInstruments[playingFileURLSegment];
                    currentInstrumentAudio.stop();
                };

                var trackLength = playBuffer.duration;

                if (audioCtx.currentTime < trackLength) {
                    var startingPlace = audioCtx.currentTime - offset;
                } else {
                    var loopPosition = audioCtx.currentTime % trackLength;
                    var startingPlace = loopPosition - offset; //HERE
                }
                audioSource.start(audioCtx.currentTime, startingPlace);

                playingSelection = audioSource;
                currentlyPlayingInstruments[playingFileURLSegment] = playingSelection;
            };
        }

        function stopAllTracks() {
            for (var key in currentlyPlayingInstruments) {
                currentlyPlayingInstruments[key].stop();

                offset = 0;
            };
        }

        /*
        Uses function parameters to create the appropriate mp3 URL, then get the file for playback.
        Then stores the buffer in a dictionary which can be accessed when the play buttons are clicked.
        'instrumentNumber' is hard-coded in the HTML for each instrument type.
         'pickedFileNumber' is the int value associated with the User selection from the instrument type drop-down.
        */
        function getMp3(instrumentNumber, elementID) {
            var e = document.getElementById(elementID);
            pickedFileNumber = e.options[e.selectedIndex].value;
            var mp3Url = instrumentUrlSegments[instrumentNumber] + pickedFileNumber + ".mp3";

            var requestedAudio = new XMLHttpRequest();
            requestedAudio.open("GET", mp3Url, true);
            requestedAudio.responseType = "arraybuffer";
            requestedAudio.onload = function () {
                audioCtx.decodeAudioData(requestedAudio.response, storeRequestedAudio)
            }
            requestedAudio.send();

            function storeRequestedAudio(buffer) {
                buffers[mp3Url] = buffer;
            }
        }

        /*
         Upon clicking 'submit', takes all of the numerical values of User selections and
         puts them in string to be stored in DB. THEN submits the form.
        */
        function collectSelections() {

            var songTitle = document.getElementById('title');

            if (songTitle.value == '') {

                alert("Oops! Looks like your song needs a title.")

            } else {

                var fileDigits = document.getElementById("digits");
                fileDigits.value = "";

                var dropdownElements = document.getElementsByClassName("selectors");
                for (i = 0; i < dropdownElements.length; i++) {
                    dropdownValue = dropdownElements[i].value;
                    fileDigits.value = fileDigits.value + dropdownValue;

                }
                
                document.getElementById("actual-submit").click();
            };
        }

    </script>
