@model MeMiXReMiX.ViewModels.AddSongViewModel

<!DOCTYPE html>
<html>
<head>
    <title>MeMiX ReMiX</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

</head>

<body>
    <h1>MeMiX ReMiX</h1>

    <p> <h5>HOW IT WORKS:</h5></p>
    <ol>
        <li>Make an audio clip selection for each instrument</li>
        <li>Click 'Play your song' and you will hear your results</li>
        <li>Repeat steps 1 & 2 you much as you like</li>
        <li>Save it when you have created your masterpiece</li>
    </ol>
    <table>
        <tr>
            <td>
                <p>Bass</p>
            </td>
            <td>
                <select id="bass-select" class="selectors" onchange="javascript: pickedAudio(0, 'bass-select');">
                    <option value="0">--</option>
                    <option value="1">Bass1</option>
                    <option value="2">Bass2</option>
                    <option value="3">Bass3</option>
                    <option value="4">Bass4</option>
                </select>
            </td>
            <td>
                @*<button id="load-bass" onclick="bassLoader()" type="button">Load Bass</button>*@
            </td>
        </tr>
        <tr>
            <td><p>Synth</p></td>
            <td>
                <select id="synth-select" class="selectors" onchange="javascript: pickedAudio(1, 'synth-select');">
                    <option value="0">--</option>
                    <option value="1">Synth1</option>
                    <option value="2">Synth2</option>
                    <option value="3">Synth3</option>
                    <option value="4">Synth4</option>
                    <option value="5">Synth5</option>

                </select>
            </td>
            <td>
                @*<button id="load-keys" onclick="keysLoader()" type="button">Load Keyboards</button>*@
            </td>
        </tr>
        <tr>
            <td><p>Drums</p></td>
            <td>
                <select id="drums-select" class="selectors" onchange="javascript: pickedAudio(2, 'drums-select');">
                    <option value="0">--</option>
                    <option value="1">Drums1</option>
                    <option value="2">Drums2</option>
                    <option value="3">Drums3</option>
                    <option value="4">Drums4</option>
                    <option value="5">Drums5</option>
                    <option value="6">Drums6</option>

                </select>
            </td>
        <tr>
            <td><p>Glitch</p></td>
            <td>
                <select id="glitch-select" class="selectors" onchange="javascript: pickedAudio(3, 'glitch-select');">
                    <option value="0">--</option>
                    <option value="1">Glitch1</option>
                    <option value="2">Glitch2</option>
                    <option value="3">Glitch3</option>
                    <option value="4">Glitch4</option>
                    <option value="5">Glitch5</option>
                    <option value="6">Glitch6</option>
                </select>
            </td>
        </tr>
        <tr>
            <td><p>Lead</p></td>
            <td>
                <select id="lead-select">
                    <option value="--">--</option>
                </select>
            </td>
            <td>
                @*<button id="load-drums" onclick="drumLoader()" type="button">Load Drums</button>*@
            </td>
        </tr>
        <tr>
            <td>
                <button type="button" id="play-song" data-playing="false" aria-checked="false">Play Your Song</button>
            </td>
            <td>
                <button id="stop-song" onlick="stopSong()" data-playing="true" aria-checked="true" type="button" disabled>Make it Stop!!!</button>
            </td>
        </tr>
    </table>

    <p><h4>Like what you've made? Give it a title and save it for later!</h4></p>

    <form asp-controller="Home" asp-action="MakeSongs" method="post">
        <div class="form-group">
            <label asp-for="Title"></label>
            <input class="form-control" asp-for="Title" />
            <span asp-validation-for="Title"></span>
        </div>
        <div class="form-group">
            <input id="digits" class="form-control" type="hidden" asp-for="FilePointer"/>
            <span asp-validation-for="FilePointer"></span>
        </div>

        <input id="actual-submit" type="submit" hidden="hidden">
    </form>

    <button id="fake-submit" onclick="javascript: collectSelections();">Save it!!!</button>


    <form asp-controller="Home" asp-action="ViewSongs" method="get">    
        <button >See Saved Songs</button>
    </form>


    <script type="text/javascript">

        var audioCtx = new AudioContext();
        var inst1;
        var inst2;
        var inst3;
        var inst4;
        var inst5;

        var bassURL = "/music/bass/bass";
        var synthURL = "/music/synth/synth";
        var drumURL = "/music/drums/drums";
        var glitchURL = "/music/glitch/glitch";

        var inst = [bassURL, synthURL, drumURL, glitchURL];


        // Gets the appropriate file based on the number associated with the instrument type and
        // the number associated with the audio clip selected by the user for that instrument type.
        function fileRetriever(instrumentNumber, pickNumber) {

            var fileURL = inst[instrumentNumber] + pickNumber + ".mp3";

            caseNumber = instrumentNumber + 1;
            
            var getAudio = new XMLHttpRequest();
            getAudio.open("GET", fileURL, true);
            getAudio.responseType = "arraybuffer";
            getAudio.onload = function () {
                audioCtx.decodeAudioData(getAudio.response, function (buffer) {
                    switch (caseNumber) {
                        case 1:
                            inst1 = buffer;
                            break;
                        case 2:
                            inst2 = buffer;
                            break;
                        case 3:
                            inst3 = buffer;
                            break;
                        case 4:
                            inst4 = buffer;
                            break;
                        case 5:
                            inst5 = buffer;
                    }
                });
                };            
            getAudio.send();
            
        };

        /*
         Gets the necessary data to be used for the fileRetriever function.
         'instNum' is hard-coded in the HTML for each instrument type.
         'pickedFile' is the int value associated with the User selection from the instrument type drop-down.
         Then fileRetriever function is called to get the appropriate file fo playback
        */
        function pickedAudio(instNum, elementID) {
            var e = document.getElementById(elementID);
            pickedFile = e.options[e.selectedIndex].value;

            fileRetriever(instNum, pickedFile);
        }


        var playButton = document.getElementById("play-song")

        playButton.addEventListener('click', function () {
            
            var playTrack = audioCtx.createBufferSource();
            playTrack.buffer = inst1;
            playTrack.connect(audioCtx.destination);
            playTrack.start(0);

            var playTrack2 = audioCtx.createBufferSource();
            playTrack2.buffer = inst2;
            playTrack2.connect(audioCtx.destination);
            playTrack2.start(0);

            var playTrack3 = audioCtx.createBufferSource();
            playTrack3.buffer = inst3;
            playTrack3.connect(audioCtx.destination);
            playTrack3.start(0);

            var playTrack4 = audioCtx.createBufferSource();
            playTrack4.buffer = inst4;
            playTrack4.connect(audioCtx.destination);
            playTrack4.start(0);

            playButton.disabled = true;


            var stopButton = document.getElementById("stop-song");
            stopButton.disabled = false;

            stopButton.addEventListener('click', function () {
                playTrack.stop();
                playTrack2.stop();
                playTrack3.stop();
                playTrack4.stop();

                playButton.disabled = false;
                stopButton.disabled = true;
            });

        });


        // TODO fix bug that removes selections from drop-downs upon 'submit' error (Even though the selections are still ready for submission)
  /*      window.onload = retainSelections();

        function retainSelections() {
            var fileDigits = document.getElementById("digits");
            var insts = document.getElementsByClassName("selectors");

            for (i = 1; i < fileDigits.length; i++) {
                inst = insts[i - 1];
                inst.value = fileDigits[i];
            };
        }
*/
        ///////////////


        /*
         Upon clicking 'submit', takes all of the numerical values of User selections and
         puts them in string to be stored in DB. THEN submits the form.
        */
        function collectSelections() {

            var fileDigits = document.getElementById("digits");
            fileDigits.value = "";
            
            var insts = document.getElementsByClassName("selectors");
            for (i = 0; i < inst.length; i++) {
                instValue = insts[i].value;
                fileDigits.value = fileDigits.value + instValue;

            }

            document.getElementById("actual-submit").click();

        }

    </script>

</body>
</html>