@model MeMiXReMiX.ViewModels.ViewSongsViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager


@{
    @if (Model.ApplicationUserUserName == null)
    {
        ViewData["Title"] = "All Music";
    } else if (Model.ApplicationUserUserName == @UserManager.GetUserName(User))
    {
        ViewData["Title"] = "Your Music";
    } else
    {
        ViewData["Title"] = Model.ApplicationUserUserName + "'s Music";
    }
}

<p><h1>@ViewData["Title"]</h1></p>

<form asp-controller="Home" asp-action="ViewSongs" method="get">
    <div class="form-group">
        <p>
            Search Music:
            <input type="text" name="SearchTerm"/>
            @if (Model.ApplicationUserUserName != null)
            {
                <input type="text" name="userName" value=@Model.ApplicationUserUserName hidden/>
            }
            <input class="btn btn-default btn-xs" type="submit" value="Search" />
        </p>
    </div>
</form>



<p>
    Sort by:
    @if (Model.ApplicationUserUserName == null)
    {
        <a asp-controller="Home" asp-action="ViewSongs" asp-route-username=@Model.ApplicationUserUserName asp-route-sortOrder="name_asc" asp-route-searchTerm="@Model.SearchTerm">Display Name (A-Z) ||</a>
        <a asp-controller="Home" asp-action="ViewSongs" asp-route-username=@Model.ApplicationUserUserName asp-route-sortOrder="name_desc" asp-route-searchTerm="@Model.SearchTerm">Display Name (Z-A) ||</a>
    }
    <a asp-controller="Home" asp-action="ViewSongs" asp-route-username=@Model.ApplicationUserUserName asp-route-sortOrder="title_asc" asp-route-searchTerm="@Model.SearchTerm">Title (A-Z) ||</a>
    <a asp-controller="Home" asp-action="ViewSongs" asp-route-username=@Model.ApplicationUserUserName asp-route-sortOrder="title_desc" asp-route-searchTerm="@Model.SearchTerm">Title (Z-A)</a>
</p>

@if (Model.Songs.Count() == 0)
{
    <p>No Songs to Display</p>
}

<ul>
    @foreach (var song in Model.Songs)
    {
        <li class="songs" value="42">
            <p>"@song.Title", created by <a asp-controller="Home" asp-action="ViewSongs" asp-route-username=@song.ApplicationUserUserName>@song.ApplicationUserUserName</a></p>
            <button class="play btn btn-sm btn-danger" onclick="javascript: songPlayer('@song.FilePointer', '@song.ID');">Play</button>
            <button class="stop btn btn-sm btn-danger" id="@song.ID" disabled>Stop</button>
            <div id="progressBar-@song.ID" class="progress" style="width: 95px" hidden>
                <div class="progress-bar progress-bar-striped progress-bar-danger active" style="width: 100%" >
                    Loading...
                </div>
            </div>
            <p></p>
        </li>
    }
</ul>

@{ 
    var previousDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    var ClassAdd = "";
}
<ul class="pagination">  
    <li><a asp-controller="Home" asp-action="ViewSongs" asp-route-sortOrder=@Model.SortOrder asp-route-page="@(Model.CurrentPage-1)"
    asp-route-username=@Model.ApplicationUserUserName asp-route-searchTerm=@Model.SearchTerm class="btn btn-default @previousDisabled">Previous</a></li>
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        if (i == Model.CurrentPage)
        {
            ClassAdd = "active";
        }
        else
        {
            ClassAdd = "";
        }
        <li><a asp-controller="Home" asp-action="ViewSongs" asp-route-sortOrder=@Model.SortOrder asp-route-page=@i
   asp-route-username=@Model.ApplicationUserUserName asp-route-searchTerm=@Model.SearchTerm class="btn btn-default @ClassAdd">@i</a></li>
    }
    <li><a asp-controller="Home" asp-action="ViewSongs" asp-route-sortOrder=@Model.SortOrder asp-route-page="@(Model.CurrentPage+1)"
    asp-route-username=@Model.ApplicationUserUserName asp-route-searchTerm=@Model.SearchTerm class="btn btn-default @nextDisabled">Next</a></li>
</ul>

<form asp-controller="Home" asp-action="ViewSongs" method="get">
    <button class="btn  btn-default small">Back to Full List of Music</button>
</form>
@*<form asp-controller="Home" asp-action="Index" method="get">
    <button class="btn  btn-default small">Go Create More Music</button>
</form>*@
<

<script type="text/javascript">

    var audioCtx = new AudioContext();

    let mp3Urls = new Array();
    let requestedBuffers = new Array();
    let decodedBuffers = new Array();
    let currentlyPlayingInstruments = {};

    //urls to be concatenated into full file paths/name
    var drumURLSegment = "/media/music/Drums/Drums";
    var bassURLSegment = "/media/music/Bass/Bass";
    var chordsURLSegment = "/media/music/Chords/Chords";
    var melodicURLSegment = "/media/music/Melodic/Melodic";

    var instrumentUrlSegments = [drumURLSegment, bassURLSegment, chordsURLSegment, melodicURLSegment];


    function songPlayer(filePointer, stopID) {

        var stopSong = document.getElementById(stopID);

        var playButtons = document.getElementsByClassName('play');
        /*Need to decrement loop because document.getElementsByClassName yields an 
        'array-like object' that removes any altered element from the 'array-like object'. */
        for (var i = playButtons.length - 1; i >= 0; i--) {
            playButtons[i].disabled = true;
        };
        progressBarID = ("progressBar-" + stopID);
        var progressBar = document.getElementById(progressBarID);
        progressBar.hidden = false;

        var bufferLoadedCounter = 0;

        for (var i = 0; i < filePointer.length; i++) {
            mp3Urls[i] = instrumentUrlSegments[i] + filePointer[i] + ".mp3";

            (function (i) {

                requestedBuffers[i] = new XMLHttpRequest();
                requestedBuffers[i].open("GET", mp3Urls[i], true);
                requestedBuffers[i].responseType = "arraybuffer";
                requestedBuffers[i].onload = function () {
                    audioCtx.decodeAudioData(requestedBuffers[i].response, function (buffer) {
                        decodedBuffers[i] = buffer;

                        bufferLoadedCounter++;

                        if (bufferLoadedCounter == 4) {
                            for (var j = 0; j < 4; j++) {
                                var audioSource = audioCtx.createBufferSource();
                                audioSource.buffer = decodedBuffers[j];
                                audioSource.connect(audioCtx.destination);
                                audioSource.loop = true;
                                audioSource.start();

                                currentlyPlayingInstruments[mp3Urls[j]] = audioSource; //need this dictionary to stop all tracks in song
                            }

                            progressBar.hidden = true;
                            stopSong.disabled = false;

                            stopSong.addEventListener('click', function () {

                                stopSong.disabled = true;

                                var playButtons = document.getElementsByClassName('play');

                                for (var h = playButtons.length - 1; h >= 0; h--) {
                                    playButtons[h].disabled = false;
                                };

                                for (var key in currentlyPlayingInstruments) {
                                    currentlyPlayingInstruments[key].stop();
                                };
                            });
                        }
                    });               
                }
                requestedBuffers[i].send();
            })(i);

        };
    }

</script>