@*@model IEnumerable<MeMiXReMiX.Models.Song>*@
@model MeMiXReMiX.ViewModels.ViewSongsViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager


@{
    @if (Model.ApplicationUserUserName == "")
    {
        ViewData["Title"] = "All Songs";
    } else if (Model.ApplicationUserUserName == @UserManager.GetUserName(User))
    {
        ViewData["Title"] = "Your Songs";
    } else
    {
        ViewData["Title"] = Model.ApplicationUserUserName + "'s Songs";
    }
}

<h1>@ViewData["Title"]</h1>

<ul>
    @foreach (var song in Model.Songs)
    {
        <li class="songs" value="42">
            <p>"@song.Title", created by <a asp-controller="Home" asp-action="ViewSongs" asp-route-username=@song.ApplicationUserUserName>@song.ApplicationUserUserName</a></p>
            <button class="play" onclick="javascript: songPlayer('@song.FilePointer', '@song.ID');">Play</button>
            <button class="stop" id="@song.ID" disabled>Stop</button>
            <div id="progressBar-@song.ID" class="progress" style="width: 103px" hidden>
                <div class="progress-bar progress-bar-striped active" style="width: 100%" >
                    Loading...
                </div>
            </div>
        </li>
    }
</ul>

<form asp-controller="Home" asp-action="Index" method="get">
    <button>Go Create More Songs</button>
</form>

<script type="text/javascript">

    var audioCtx = new AudioContext();

    let mp3Urls = new Array();
    let requestedBuffers = new Array();
    let decodedBuffers = new Array();
    let currentlyPlayingInstruments = {};

    //urls to be concatenated into full file paths/name
    var drumURLSegment = "/media/music/Drums/Drums";
    var bassURLSegment = "/media/music/Bass/Bass";
    var chordsURLSegment = "/media/music/Chords/Chords";
    var melodicURLSegment = "/media/music/Melodic/Melodic";

    var instrumentUrlSegments = [drumURLSegment, bassURLSegment, chordsURLSegment, melodicURLSegment];


    function songPlayer(filePointer, stopID) {


        var playButtons = document.getElementsByClassName('play');
        /*Need to decrement loop because document.getElementsByClassName yields an 
        'array-like object' that removes any altered element from the 'array-like object'. */
        for (var i = playButtons.length - 1; i >= 0; i--) {
            playButtons[i].disabled = true;
        };
        progressBarID = ("progressBar-" + stopID);
        var progressBar = document.getElementById(progressBarID);
        progressBar.hidden = false;

        currentAudioContextTime = audioCtx.currentTime;

        for (var i = 0; i < filePointer.length; i++) {
            mp3Urls[i] = instrumentUrlSegments[i] + filePointer[i] + ".mp3";

            (function (i) {
                var currentMp3Url = mp3Urls[i];

                requestedBuffers[i] = new XMLHttpRequest();
                requestedBuffers[i].open("GET", mp3Urls[i], true);
                requestedBuffers[i].responseType = "arraybuffer";
                requestedBuffers[i].onload = function () {
                    audioCtx.decodeAudioData(requestedBuffers[i].response, function (buffer) {
                        decodedBuffers[i] = buffer;

                        var audioSource = audioCtx.createBufferSource();
                        audioSource.buffer = decodedBuffers[i];
                        audioSource.connect(audioCtx.destination);
                        audioSource.loop = true;
                        audioSource.start(currentAudioContextTime + 1.5);

                        currentlyPlayingInstruments[currentMp3Url] = audioSource;
                    });
                }
                requestedBuffers[i].send();

            })(i);

        };

        function stopCurrentSong(id) {
            stopSong = document.getElementById(id);
            stopSong.disabled = false;

            progressBarID = ("progressBar-" + id);
            var progressBar = document.getElementById(progressBarID);
            progressBar.hidden = true;

            stopSong.addEventListener('click', function () {

                stopSong.disabled = true;

                var playButtons = document.getElementsByClassName('play');

                for (var i = playButtons.length - 1; i >= 0; i--) {
                    playButtons[i].disabled = false;
                };

                for (var key in currentlyPlayingInstruments) {
                    currentlyPlayingInstruments[key].stop();
                };
            });
        }

        setTimeout(stopCurrentSong, 1500, stopID);

    };

</script>